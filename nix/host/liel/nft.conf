define net_ifs = {"eth0"};

flush ruleset;

table inet filter0 {
	counter i_eth_lan {};
	counter o_eth_lan {};

	# Counter hooks
        chain preroute {
	      type filter hook prerouting priority -1024;
	      counter name iif map { "eth0": i_eth_lan};
	}
	chain postroute {
	      type filter hook postrouting priority 1024;
	      counter name oif map { "eth0": o_eth_lan};
	}

	chain a_input {
	      type filter hook input priority 0; policy accept;
	      iif $net_ifs counter goto ext_in;
	      iif {"tun_vpn_o"} counter goto vpn_in;
	}

        chain a_output {
              type filter hook output priority 0; policy accept;
        }

        chain a_forward {
              type filter hook forward priority 0
	      policy drop
	      iifname "lc_br_vu" oif $net_ifs ip saddr "10.231.1.5" counter accept;
	      iifname $net_ifs oif "lc_br_vu" ip daddr "10.231.1.5" counter accept;
	      iifname "lc_br_vu" oifname "lc_br_vu" counter accept;
        }

        chain ext_in {
              ip protocol icmp icmp type { echo-request, destination-unreachable, time-exceeded, parameter-problem} counter accept
              meta l4proto ipv6-icmp icmpv6 type { nd-neighbor-solicit, packet-too-big, nd-neighbor-advert, destination-unreachable, nd-router-advert, time-exceeded, echo-request} counter accept
	      tcp dport {22, 80, 443, 6667, 6697, 9100} counter accept
              counter jump notnew
        }

	chain vpn_in {
		ip protocol icmp icmp type { echo-request, destination-unreachable, time-exceeded, parameter-problem} counter accept
		meta l4proto ipv6-icmp icmpv6 type { nd-neighbor-solicit, packet-too-big, nd-neighbor-advert, destination-unreachable, nd-router-advert, time-exceeded, echo-request} counter accept
		tcp dport {80, 443} counter accept
		counter jump notnew
	}

        chain notnew {
              ct state { established, related} accept
              jump block
        }

        chain block {
              meta l4proto tcp counter reject with tcp reset
              counter reject
              counter drop
        }
}

table inet nat {
      chain postrouting {
	    type nat hook postrouting priority srcnat
	    oifname $net_ifs masquerade
      };
};
